C51 COMPILER V9.59.0.0   DS18B20                                                           09/25/2018 22:12:56 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\DS18B20.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\DS18B20.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\DS18B20.lst) TABS(2) OBJECT(.\Objects\DS18B20.obj)

line level    source

   1          
   2          #include <intrins.h>//延时子函数中有_nop_();
   3          #include "DS18B20.h"
   4          
   5          void Delay1ms()   //@11.0592MHz
   6          {
   7   1        unsigned char i, j;
   8   1      
   9   1        _nop_();
  10   1        _nop_();
  11   1        _nop_();
  12   1        i = 11;
  13   1        j = 190;
  14   1        do
  15   1        {
  16   2          while (--j);
  17   2        } while (--i);
  18   1      }
  19          
  20          /*******************************************************************************
  21          * 函 数 名         : Ds18b20Init
  22          * 函数功能       : 初始化
  23          * 输    入         : 无
  24          * 输    出         : 初始化成功返回1，失败返回0
  25          *******************************************************************************/
  26          
  27          uchar Ds18b20Init()
  28          {
  29   1        uchar i;
  30   1        DSPORT = 0;      //将总线拉低480us~960us
  31   1        i = 70; 
  32   1        while(i--);//延时642us
  33   1        DSPORT = 1;     //然后拉高总线，如果DS18B20做出反应会将在15us~60us后总线拉低
  34   1        i = 0;
  35   1        while(DSPORT) //等待DS18B20拉低总线
  36   1        {
  37   2          i++;
  38   2          if(i>5)//等待>5MS
  39   2          {
  40   3            return 0;//初始化失败
  41   3          }
  42   2          Delay1ms();
  43   2        }
  44   1        return 1;//初始化成功
  45   1      }
  46          
  47          /*******************************************************************************
  48          * 函 数 名         : Ds18b20WriteByte
  49          * 函数功能       : 向18B20写入一个字节
  50          * 输    入         : com
  51          * 输    出         : 无
  52          *******************************************************************************/
  53          
  54          void Ds18b20WriteByte(uchar dat)
C51 COMPILER V9.59.0.0   DS18B20                                                           09/25/2018 22:12:56 PAGE 2   

  55          {
  56   1        uint i, j;
  57   1      
  58   1        for(j=0; j<8; j++)
  59   1        {
  60   2          DSPORT = 0;         //每写入一位数据之前先把总线拉低1us
  61   2          i++;
  62   2          DSPORT = dat & 0x01;  //然后写入一个数据，从最低位开始
  63   2          i=6;
  64   2          while(i--); //延时68us，持续时间最少60us
  65   2          DSPORT = 1; //然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
  66   2          dat >>= 1;
  67   2        }
  68   1      }
  69          /*******************************************************************************
  70          * 函 数 名         : Ds18b20ReadByte
  71          * 函数功能       : 读取一个字节
  72          * 输    入         : com
  73          * 输    出         : 无
  74          *******************************************************************************/
  75          
  76          
  77          uchar Ds18b20ReadByte()
  78          {
  79   1        uchar byte, bi;
  80   1        uint i, j;  
  81   1        for(j=8; j>0; j--)
  82   1        {
  83   2          DSPORT = 0;//先将总线拉低1us
  84   2          i++;
  85   2          DSPORT = 1;//然后释放总线
  86   2          i++;
  87   2          i++;//延时6us等待数据稳定
  88   2          bi = DSPORT;   //读取数据，从最低位开始读取
  89   2          /*将byte左移一位，然后与上右移7位后的bi，注意移动之后移掉那位补0。*/
  90   2          byte = (byte >> 1) | (bi << 7);             
  91   2          i = 4;    //读取完之后等待48us再接着读取下一个数
  92   2          while(i--);
  93   2        }       
  94   1        return byte;
  95   1      }
  96          /*******************************************************************************
  97          * 函 数 名         : Ds18b20ChangTemp
  98          * 函数功能       : 让18b20开始转换温度
  99          * 输    入         : com
 100          * 输    出         : 无
 101          *******************************************************************************/
 102          
 103          void  Ds18b20ChangTemp()
 104          {
 105   1        Ds18b20Init();
 106   1        Delay1ms();
 107   1        Ds18b20WriteByte(0xcc);   //跳过ROM操作命令    
 108   1        Ds18b20WriteByte(0x44);     //温度转换命令
 109   1      //  Delay1ms(100);  //等待转换成功，而如果你是一直刷着的话，就不用这个延时了
 110   1         
 111   1      }
 112          /*******************************************************************************
 113          * 函 数 名         : Ds18b20ReadTempCom
 114          * 函数功能       : 发送读取温度命令
 115          * 输    入         : com
 116          * 输    出         : 无
C51 COMPILER V9.59.0.0   DS18B20                                                           09/25/2018 22:12:56 PAGE 3   

 117          *******************************************************************************/
 118          
 119          void  Ds18b20ReadTempCom()
 120          { 
 121   1      
 122   1        Ds18b20Init();
 123   1        Delay1ms();
 124   1        Ds18b20WriteByte(0xcc);  //跳过ROM操作命令
 125   1        Ds18b20WriteByte(0xbe);  //发送读取温度命令
 126   1      }
 127          /*******************************************************************************
 128          * 函 数 名         : Ds18b20ReadTemp
 129          * 函数功能       : 读取温度
 130          * 输    入         : com
 131          * 输    出         : 无
 132          *******************************************************************************/
 133          
 134          int Ds18b20ReadTemp()
 135          {
 136   1        int temp = 0;
 137   1        uchar tmh, tml;
 138   1        Ds18b20ChangTemp();       //先写入转换命令
 139   1        Ds18b20ReadTempCom();     //然后等待转换完后发送读取温度命令
 140   1        tml = Ds18b20ReadByte();    //读取温度值共16位，先读低字节
 141   1        tmh = Ds18b20ReadByte();    //再读高字节
 142   1        temp = tmh;
 143   1        temp <<= 8;
 144   1        temp |= tml;
 145   1        return temp;
 146   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    227    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
